// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/26/2020 16:30:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab5_vlg_sample_tst(
	S0,
	S1,
	S2,
	sampler_tx
);
input  S0;
input  S1;
input  S2;
output sampler_tx;

reg sample;
time current_time;
always @(S0 or S1 or S2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab5_vlg_check_tst (
	A,
	P,
	sampler_rx
);
input  A;
input  P;
input sampler_rx;

reg  A_expected;
reg  P_expected;

reg  A_prev;
reg  P_prev;

reg  A_expected_prev;
reg  P_expected_prev;

reg  last_A_exp;
reg  last_P_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	P_prev = P;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	P_expected_prev = P_expected;
end



// expected A
initial
begin
	A_expected = 1'bX;
end 

// expected P
initial
begin
	P_expected = 1'bX;
end 
// generate trigger
always @(A_expected or A or P_expected or P)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected P = %b | ",A_expected_prev,P_expected_prev);
	$display("| real A = %b | real P = %b | ",A_prev,P_prev);
`endif
	if (
		( A_expected_prev !== 1'bx ) && ( A_prev !== A_expected_prev )
		&& ((A_expected_prev !== last_A_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp = A_expected_prev;
	end
	if (
		( P_expected_prev !== 1'bx ) && ( P_prev !== P_expected_prev )
		&& ((P_expected_prev !== last_P_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_P_exp = P_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#80000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg S0;
reg S1;
reg S2;
// wires                                               
wire A;
wire P;

wire sampler;                             

// assign statements (if any)                          
lab5 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.P(P),
	.S0(S0),
	.S1(S1),
	.S2(S2)
);

// S0
initial
begin
	S0 = 1'b0;
	S0 = #10000 1'b1;
	S0 = #10000 1'b0;
	S0 = #10000 1'b1;
	S0 = #10000 1'b0;
	S0 = #10000 1'b1;
	S0 = #10000 1'b0;
	S0 = #10000 1'b1;
end 

// S1
initial
begin
	S1 = 1'b0;
	S1 = #20000 1'b1;
	S1 = #20000 1'b0;
	S1 = #20000 1'b1;
end 

// S2
initial
begin
	S2 = 1'b0;
	S2 = #40000 1'b1;
end 

lab5_vlg_sample_tst tb_sample (
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.sampler_tx(sampler)
);

lab5_vlg_check_tst tb_out(
	.A(A),
	.P(P),
	.sampler_rx(sampler)
);
endmodule

